(one line comment)
:\ ^key 10 = when ; ^\ ;

(boolean constant)
:true   ^1 ;
:false  ^0 ;
:on     ,true ^;
:off    ,false ^;

(helper words)
|2R> ^R> R> ;
|2>R ^>R >R ;

|2dup ^dup dup ;
|2drop ^drop drop ;

|1+ ^1 + ;
|1- ^1 - ;

|;; ^R> drop ;

|cells ^cell * ;
:cells ^cell * ;

(loop)
:times (xt n -) ^over execute 1- dup when times 2drop ;

(rendering)
:cr ^10 emit ;
:tab ^9 emit ;

(dump word)
:emit.; ^ drop 46 emit ;; ;
:v-emit (c -) ^
  dup  32 < when emit.;
  dup 128 < unless emit.;
  emit ;

:<dumpc> ^ 2>R dup c@ dup v-emit 32 emit . tab 1+ 2R> ;
:<dumpl> ^ 2>R '<dumpc> ^12 times cr 2R> ;
:dump  (a -) ^ cr '<dumpl> ^10 times drop cr ;

:alloc (n - a) ^here @ swap over + here ! ;

(create null-terminated string)
:"init ^here @ cell + ;
:"loop ^dup key dup 34 = when ; swap c! 1 + "loop ;
:"done ^drop drop here @ - dup (null ^1 + alloc swap over ! ;
:" ^"init "loop "done ;

(print string)
:."init ^dup dup @ + swap cell + ;
:."loop ^over over = when ; dup c@ emit 1 + ."loop ;
:." ^."init ."loop 2drop ;

(system)
:cmd ^cell + system ;

(marker/forget)
:marker ^latest @  i-latest @   here @ 8 cells + ;
:forget ^latest !  i-latest !   here ! ;
