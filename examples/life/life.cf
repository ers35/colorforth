%
\ Usage: colorforth small.cf life.cf gliders.cf

:h ~ [,] ^ ;
:w ~ [,] ^ ;

:help
   ~c" g             One generation" ^prn
   ~c" n gg          n generations" ^prn
   ~c" slow          slow speed" ^prn
   ~c" med           medium speed" ^prn
   ~c" fast          fast speed" ^prn
   ~c" (ms) delay !  set speed" ^prn
   ~c" cls           clear and redraw board" ^prn ;

:size ~w h * [,] ^;

:n-gen ~0 variable ^;
:delay ~100 variable ^;

:slow ^200 delay ! ;
:med  ^100 delay ! ;
:fast ^ 10 delay ! ;

:row ,w ^* ;

:n-world ~0 variable ^;
:flip ^1 n-world @ - n-world ! ;

:world ~w h * 2 * dalloc [,] ^;
:world# ^h mod row  swap w mod + world + ;
:world! ~( n x y - ) ^world# n-world @ size * + c! ;
:world@ ~( x y ) ^world# 1 n-world @ - size * + c@ ;

:<world-h> ^; :<world-v> ^;

:world-loop-h ^I@ J@ <world-h> I++  I@ w < when world-loop-h ;
:world-loop-v ^0 I! world-loop-h <world-v> J++ J@ h < when world-loop-v ;
:world-loop ^I>R J>R 0 J! world-loop-v R>J R>I ;

:esc ^27 emit ;
:at-00 ^esc ~c" [0;0H" ^pr ;
:star-color ^esc ~c" [38;5;154m" ^pr ;
:blank-color ^esc ~c" [38;5;53m" ^pr ;

:.star  ^star-color ~key * [,] ^emit ;
:.blank ^blank-color ~key . [,] ^emit ;
:.cell ~( x y - ) ^world@ if .star else .blank ;

:.world ^at-00
  `.cell `<world-h> ^is   `cr `<world-v> ^is
  world-loop
  star-color
  ~c" Generation: " ^pr n-gen ? cr cr ;

:cls ^esc ~c" [2J" ^pr .world ;

:sum-neighbor ~( x y - n )^
   I>R J>R   J! I!
   I@ 1- J@ 1- world@     I@ J@ 1- world@ +   I@ 1+ J@ 1- world@ +
   I@ 1- J@    world@ +                       I@ 1+ J@    world@ +
   I@ 1- J@ 1+ world@ +   I@ J@ 1+ world@ +   I@ 1+ J@ 1+ world@ +
   R>J R>I ;

:apply-alive ~( n - ) ^dup 2 = swap 3 = or if 1 else 0 ;
:apply-dead ~( n - ) ^3 = if 1 else 0 ;
:apply ~( x y - )^
   2dup 2dup sum-neighbor -rot
   world@ if apply-alive else apply-dead
   -rot world! ;

:gen ^
   `apply `<world-h> ^is   `nop `<world-v> ^is
   world-loop   n-gen 1+! ;

:g ^gen flip .world delay @  mssleep ;

:gg
:gens ~( n -- )^g 1- dup when gens drop cls ;

:life ^flip cls echo on help ;

~\ Patterns
:ox ~0 variable ^;
:x ~0 variable ^;
:y ~0 variable ^;

:ox! ^x @ ox ! ;
:at ~( x y - )^y ! x ! ox! ;
:world!! ^x @ y @ world! x 1+! ;
:* ^1 world!! ;
:. ^0 world!! ;
:.s ~( n -) ^. 1- dup when .s drop ;
:/ ^ox @ x !  y 1+! ;

:blinker ^* * * ;

:toad ^ox!
   * * *   /
   . * * * ;

:pentomino ^ox!
   * *   /
   . * * /
   . *   ;

:pi ^ox!
   * *   /
   . * * /
   * *   ;

:glider ^ox!
   . *   /
   . . * /
   * * * ;

:glider2 ^ox!
   . *   /
   * . . /
   * * * ;

:glider3 ^ox!
   * * * /
   . . * /
   . *   ;

:glider4 ^ox!
   * * * /
   * . . /
   . *   ;

:pulsar ^ox!
   * * * * * /
   * . . . * ;

:ship ^ox!
   . * * * * /
   * . . . * /
   . . . . * /
   . . . *   ;

:ship2 ^ox!
   * * * * . /
   * . . . * /
   * . . . . /
   . *       ;

:ship3 ^ox!
   . * . . /
   * . . . /
   * . . . /
   * . . * /
   * * * . ;

:ship4 ^ox!
   * * * . /
   * . . * /
   * . . . /
   * . . . /
   . * . . ;


:pentadecathalon ^ox!
   * * * * * * * * * * ;

:clock ^ox!
   . * . . /
   . . * * /
   * * . . /
   . . * . ;
