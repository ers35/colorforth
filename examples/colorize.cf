%
~\ usage: cat lib.cf | ./colorforth examples/colorize.cf -e "without-prefix colorize bye" | less -r

:[esc0 ^27 emit ~key [ [,] ^emit ~key 0 [,] ,;
:[esc1 ^[esc0 emit ~key 1 [,] ^emit ~key ; [,] ^emit ,;
:[esc  ^[esc1 ~key 9 [,] ^emit ,;
:esc]  ^emit ~key m [,] ^emit ,;

:eof? ^-1 = ,;

:clear!   ^[esc0 esc] ,;
:red!     ^[esc ~key 1 [,] ^esc] ,;
:green!   ^[esc ~key 2 [,] ^esc] ,;
:yellow!  ^[esc ~key 3 [,] ^esc] ,;
:blue!    ^[esc ~key 4 [,] ^esc] ,;
:magenta! ^[esc ~key 5 [,] ^esc] ,;
:cyan!    ^[esc ~key 6 [,] ^esc] ,;
:white!   ^[esc1 ~key 3 [,] ^emit ~key 7 [,] ^esc] ,;

:prefix? ~1 variable ,;
:string? ~0 variable ,;

:<stop>
:stop ^drop ;;; ,;

:without-prefix `stop `<stop> ^is ,;
:with-prefix `nop `<stop> ^is ,;

:<getchar> ^getchar ,;

:dump-loop ^<getchar> dup emit over = ~nif ^dump-loop ~then ^drop ,;
:dump-to-char ^swap emit dump-loop yellow! 1 prefix? ! ,;

:.char
   ^dup eof? ~if ^clear! ;;; ~then
   ^string? @ ~if
      ^dup 32 = ~if key " [,] ^magenta! dump-to-char ~else ^emit ~then
      ^0 string? ! ,;
   ~then

   ^dup 32 = over 10 = or ~if ^1 prefix? ! emit ,; ~then

   ^dup ~key \ [,] ^= ~if ^white! 10 dump-to-char ,; ~then
   ^dup ~key " [,] ^= ~if ^1 string? ! ~then

   ^prefix? @ ~nif ^emit ,; ~then

   ^0 prefix? !

   ^dup ~key : [,] ^= ~if ^red! <stop> ~then
   ^dup ~key ^ [,] ^= ~if ^green! <stop> ~then
   ^dup ~key ~ [,] ^= ~if ^yellow! <stop> ~then
   ^dup ~key ' [,] ^= ~if ^blue! <stop> ~then
   ^dup ~key ` [,] ^= ~if ^blue! <stop> ~then
   ^dup ~key , [,] ^= ~if ^cyan! <stop> ~then
   ^dup ~key ( [,] ^= ~if ^white! ~then

   ^emit ,;

:colorize ^<getchar> .char colorize ,;
