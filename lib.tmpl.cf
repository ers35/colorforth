:\ ^key 10 = unless \ ;
:( ^key 41 = unless ( ;
~( The two lines above defines comments. We do not have them till there )

~( boolean constant )
|true   ^1 ;
|false  ^0 ;

:on  ^1 swap c! ;
:off ^0 swap c! ;

:hex ^16 base! ;
:dec ^10 base! ;
:bin ^2 base! ;
:base? ^base@ dup dec . base! ;

:% ^echo off ;

~( helper words )
|2R> ^R> R> ;
|2>R ^>R >R ;

|2dup ^over over ;
|2drop ^drop drop ;
:2dup ^2dup ;
:2drop ^2drop ;

|1+ ^1 + ;
|1- ^1 - ;
:1+ ^1+ ;
:1- ^1- ;

:+! ^dup @ rot + swap ! ;
:1+! ^dup @ 1+ swap ! ;
:1-! ^dup @ 1- swap ! ;
:cell+! ^dup @ cell + swap ! ;

|;; ^R> drop ;

|cells ^cell * ;
:cells ^cells ;

:noname> ^here @ ;

~( loop )
:times-loop ~( xt n - ) ^1- over execute dup when times-loop ;
:times ~( ent n - ) ^swap code> swap
:ctimes ~( xt n - ) ^times-loop 2drop ;
~'times-loop ~entry/hide

~( another loop form )
:-done?; ^1 - dup when ;  drop ;; ;

~( rendering )
:cr ^10 emit ;
:tab ^9 emit ;
:space ^32 emit ;
:spaces ^space -done?;  spaces ;

~( dump word )
:emit.; ^ drop 46 emit ;; ;
:v-emit ~( c - ) ^
  dup  32 < when emit.;
  dup 128 < unless emit.;
  emit ;

:dumpc ^swap dup c@ dup v-emit space . tab  1+ swap ;
:dumpl ^dumpc -done?; dumpl ;
:dumpb ^swap  12 dumpl  swap cr -done?; dumpb ;
:dump ~( a - ) ^10 dumpb drop ;
~'dumpc ~entry/hide  'dumpl ~entry/hide  'dumpb ~entry/hide


:alloc ~( n - a ) ^here @ swap over + here ! ;

:>! ^cell alloc ! ;
:>c! ^1 alloc ! ;

:data-heap-size ^50000 ;
~data-heap-size c-alloc :dataheap ~>> ^;
~cell alloc :dhere ~>> ^;
~dataheap dhere !

:dalloc ~( n - a ) ^dhere @ swap over + dhere ! ;

:>d! ^cell dalloc ! ;
:>dc! ^1 dalloc ! ;

:? ^@ . ;
:variable ^cell dalloc dup >> ! ;
:variables ^cells dalloc >> ;

|[] ^cells + ;
:[] ^[] ;

~( create null-terminated string )
:"init ^dhere @ cell + ;
:"loop ^dup key dup ~key " >> ^= when ; swap c! 1 + "loop ;
:"done ^drop drop dhere @ - dup ^1 + dalloc swap cell - over ! ;
:" ^"init "loop "done ;
:c" ^" >> ;


~( print string )
:."init ^dup dup @ + cell + swap cell + ;
:."loop ^over over = when ; dup c@ emit 1 + ."loop ;
:pr
:." ^."init ."loop 2drop ;
:prn ^pr cr ;
:npr ^cr pr ;
:nprn ^cr pr cr ;

:droom
   ~c" Data: " ^pr dhere @  dataheap - dup . ~c" / " ^pr data-heap-size .
   100 * data-heap-size / . ~c" %" ^prn ;
:dmarker ^dhere @  >> ;
:dforget ^dhere ! ;

~( system )
:cmd ^cell + system ;

~( marker/forget )
:marker ^latest @  i-latest @   here @ 8 cells +   >> >> >> ;
:forget ^latest !  i-latest !   here ! ;

~( files )
:aload ~( filename - buf ) ^
   dup file-size cell + c-alloc
   dup rot load ;

~( mem move )
:-cmove-done?; ^1- dup when ;  2drop drop ;; ;
:cmove-advance ^ 1+ ;
:cmove-loop ^
   >R  swap dup c@ >R cmove-advance
   swap dup R> swap c! cmove-advance
   R>  -cmove-done?; cmove-loop
;
:cmove ~( src dst n - ) ^
   `1+ `cmove-advance ^is
   cmove-loop ;

:cmove> ~( src dst n - ) ^
  1- >R R@ + swap R@ + swap R> 1+
  `1- `cmove-advance ^is
  cmove-loop ;

~( math )
:sign-0; ^drop 0 ;; ;
:sign ^dup unless sign-0; < choose 1 -1 ;

~( eval )
:ptr ~0 variable ^;
:count ~0 variable ^;
:loop ^ptr @ c@ parse  ptr 1+!  count 1-!  count @ unless ; loop ;
:eval ~( string - ) ^clear-tib  dup cell + ptr !  @ count !  loop  32 parse ;
'ptr ~entry/hide  'count ~entry/hide  'loop ~entry/hide

~( time )
:time/start ^utime >> ;
:time/end ^utime swap - 1000 / . ~c" ms elapsed" ^prn ;
