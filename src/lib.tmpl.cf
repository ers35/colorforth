(one line comment)
:\ ^key 10 = unless \ ;

(boolean constant)
|true   ^1 ;
|false  ^0 ;

|on     ^true ^;
|off    ^false ^;
:on  ^on ;
:off ^off ;

:eon! ^on echo! ;
:eoff! ^off echo! ;

(helper words)
|2R> ^R> R> ;
|2>R ^>R >R ;

|2dup ^dup dup ;
|2drop ^drop drop ;

|1+ ^1 + ;
|1- ^1 - ;

|;; ^R> drop ;

|cells ^cell * ;
:cells ^cells ;

:noname> ^here @ ;

(loop)
:<times-loop> (xt n -) ^1- over execute dup when <times-loop> ;
:times (ent n -) ^swap code> swap
:ctimes (xt n -) ^<times-loop> 2drop ;

(another loop form)
:-done?; ^1 - dup when ;  drop ;; ;

(rendering)
:cr ^10 emit ;
:tab ^9 emit ;
:space ^32 emit ;

(dump word)
:emit.; ^ drop 46 emit ;; ;
:v-emit (c -) ^
  dup  32 < when emit.;
  dup 128 < unless emit.;
  emit ;

:<dumpc> ^ 2>R dup c@ dup v-emit space . tab 1+ 2R> ;
:<dumpl> ^ 2>R '<dumpc> ^12 times cr 2R> ;
:dump  (a -) ^ cr '<dumpl> ^10 times drop cr ;


:alloc (n - a) ^here @ swap over + here ! ;

:>! ^cell alloc ! ;
:>c! ^1 alloc ! ;

~10000 alloc :dataheap ~>_ ^;
~cell alloc :dhere ~>_ ^;
~dataheap dhere !

:dalloc (n - a) ^dhere @ swap over + dhere ! ;

:>d! ^cell dalloc ! ;
:>dc! ^1 dalloc ! ;

(create null-terminated string)
:"init ^dhere @ cell + ;
:"loop ^dup key dup ~key " >_ ^= when ; swap c! 1 + "loop ;
:"done ^drop drop dhere @ - dup (null ^1 + dalloc swap cell - over ! ;
:" ^"init "loop "done ;
:c" ^" >_ ;


(print string)
:."init ^dup dup @ + cell + swap cell + ;
:."loop ^over over = when ; dup c@ emit 1 + ."loop ;
:pr
:." ^."init ."loop 2drop ;
:prn ^pr cr ;
:nprn ^cr pr cr ;


(system)
:cmd ^cell + system ;

(marker/forget)
:marker ^latest @  i-latest @   here @ 8 cells +   >_ >_ >_ ;
:forget ^latest !  i-latest !   here ! ;

(math)
:drop; ^drop ;; ;
:min ^over over < when drop; swap drop ;
:max ^over over < unless drop; swap drop ;
:> ^swap < ;
